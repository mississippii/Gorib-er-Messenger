{"ast":null,"code":"let socketInstance = null;\nexport const createWebSocket = url => {\n  if (!socketInstance || socketInstance.readyState === WebSocket.CLOSED) {\n    console.log(\"Creating new WebSocket connection...\");\n    socketInstance = new WebSocket(url);\n    socketInstance.onopen = () => {\n      console.log(\"WebSocket connection established.\");\n    };\n    socketInstance.onclose = () => {\n      console.log(\"WebSocket connection closed.\");\n      socketInstance = null; // Reset instance\n    };\n    socketInstance.onerror = error => {\n      console.error(\"WebSocket error:\", error);\n    };\n  } else if (socketInstance.readyState === WebSocket.CONNECTING) {\n    console.log(\"WebSocket is still connecting...\");\n  }\n  return socketInstance;\n};\nexport const closeWebSocket = () => {\n  if (socketInstance && socketInstance.readyState !== WebSocket.CLOSED) {\n    socketInstance.close();\n    socketInstance = null;\n  }\n};\nexport const getWebSocketInstance = () => socketInstance;","map":{"version":3,"names":["socketInstance","createWebSocket","url","readyState","WebSocket","CLOSED","console","log","onopen","onclose","onerror","error","CONNECTING","closeWebSocket","close","getWebSocketInstance"],"sources":["/home/veer/Documents/JavaScript/messenger-client/src/components/WebSocketService.js"],"sourcesContent":["let socketInstance = null;\n\nexport const createWebSocket = (url) => {\n  if (!socketInstance || socketInstance.readyState === WebSocket.CLOSED) {\n    console.log(\"Creating new WebSocket connection...\");\n    socketInstance = new WebSocket(url);\n\n    socketInstance.onopen = () => {\n      console.log(\"WebSocket connection established.\");\n    };\n\n    socketInstance.onclose = () => {\n      console.log(\"WebSocket connection closed.\");\n      socketInstance = null; // Reset instance\n    };\n\n    socketInstance.onerror = (error) => {\n      console.error(\"WebSocket error:\", error);\n    };\n  } else if (socketInstance.readyState === WebSocket.CONNECTING) {\n    console.log(\"WebSocket is still connecting...\");\n  }\n\n  return socketInstance;\n};\n\nexport const closeWebSocket = () => {\n  if (socketInstance && socketInstance.readyState !== WebSocket.CLOSED) {\n    socketInstance.close();\n    socketInstance = null;\n  }\n};\n\nexport const getWebSocketInstance = () => socketInstance;\n"],"mappings":"AAAA,IAAIA,cAAc,GAAG,IAAI;AAEzB,OAAO,MAAMC,eAAe,GAAIC,GAAG,IAAK;EACtC,IAAI,CAACF,cAAc,IAAIA,cAAc,CAACG,UAAU,KAAKC,SAAS,CAACC,MAAM,EAAE;IACrEC,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC;IACnDP,cAAc,GAAG,IAAII,SAAS,CAACF,GAAG,CAAC;IAEnCF,cAAc,CAACQ,MAAM,GAAG,MAAM;MAC5BF,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;IAClD,CAAC;IAEDP,cAAc,CAACS,OAAO,GAAG,MAAM;MAC7BH,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;MAC3CP,cAAc,GAAG,IAAI,CAAC,CAAC;IACzB,CAAC;IAEDA,cAAc,CAACU,OAAO,GAAIC,KAAK,IAAK;MAClCL,OAAO,CAACK,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;IAC1C,CAAC;EACH,CAAC,MAAM,IAAIX,cAAc,CAACG,UAAU,KAAKC,SAAS,CAACQ,UAAU,EAAE;IAC7DN,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;EACjD;EAEA,OAAOP,cAAc;AACvB,CAAC;AAED,OAAO,MAAMa,cAAc,GAAGA,CAAA,KAAM;EAClC,IAAIb,cAAc,IAAIA,cAAc,CAACG,UAAU,KAAKC,SAAS,CAACC,MAAM,EAAE;IACpEL,cAAc,CAACc,KAAK,CAAC,CAAC;IACtBd,cAAc,GAAG,IAAI;EACvB;AACF,CAAC;AAED,OAAO,MAAMe,oBAAoB,GAAGA,CAAA,KAAMf,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}