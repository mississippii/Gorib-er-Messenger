{"ast":null,"code":"var _jsxFileName = \"/home/veer/Documents/JavaScript/messenger-client/src/components/WebSocketClient.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction WebSocketClient() {\n  _s();\n  const [socket, setSocket] = useState(null);\n  const [message, setMessage] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [activeUsers, setActiveUsers] = useState([]);\n  const [receiver, setReceiver] = useState(null);\n  const [senderIp, setSenderIp] = useState(\"\");\n  const [senderPort, setSenderPort] = useState(\"\");\n  useEffect(() => {\n    // Create WebSocket connection only once when the component mounts\n    const socket = new WebSocket(\"ws://192.168.0.132:8880/chat\");\n    socket.onopen = () => {\n      console.log(\"Connected to WebSocket server\");\n    };\n    socket.onmessage = event => {\n      console.log(\"Incoming message:\", event.data);\n      const data = JSON.parse(event.data);\n      setMessages(prevMessages => [...prevMessages, `Receiver: ${data.text}`]);\n    };\n\n    // Store socket in state to be used later\n    setSocket(socket);\n\n    // Clean up on unmount (close WebSocket connection)\n    return () => {\n      if (socket) {\n        socket.close();\n      }\n    };\n  }, []); // Empty dependency array to ensure this effect only runs once\n\n  useEffect(() => {\n    // Fetch active users list from the server using axios\n    axios.get(\"http://192.168.0.132:8880/active-users\").then(response => {\n      // Convert the object keys to an array of active users\n      const users = Object.keys(response.data);\n      setActiveUsers(users); // Set active users to state\n    }).catch(error => {\n      console.error(\"Error fetching active users:\", error);\n    });\n  }, []);\n  const sendMessage = () => {\n    if (socket && message && receiver) {\n      const msg = {\n        sender: `${senderIp}:${senderPort}`,\n        // Sender IP and port from the state\n        receiver: receiver,\n        // Receiver IP and port selected from the UI\n        text: message // Message input\n      };\n      console.log(\"Sending message:\", msg); // Log JSON to confirm structure\n      socket.send(JSON.stringify(msg)); // Send the message\n      setMessages(prevMessages => [...prevMessages, `You: ${message}`]); // Update UI with sent message\n      setMessage(\"\"); // Clear input field\n    } else {\n      console.log(\"Missing data to send message\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Chat Application\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Active Users\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: activeUsers.length > 0 ? activeUsers.map(user => /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => setReceiver(user),\n          children: user\n        }, user, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 15\n        }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No active users found.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), receiver && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Chat with \", receiver]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: messages.length > 0 ? messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n          children: msg\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 17\n        }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No messages yet.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: message,\n        onChange: e => setMessage(e.target.value),\n        placeholder: \"Type a message\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n_s(WebSocketClient, \"LGWgpwYm3dBArVD3kcEIwpdvyas=\");\n_c = WebSocketClient;\nexport default WebSocketClient;\nvar _c;\n$RefreshReg$(_c, \"WebSocketClient\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","WebSocketClient","_s","socket","setSocket","message","setMessage","messages","setMessages","activeUsers","setActiveUsers","receiver","setReceiver","senderIp","setSenderIp","senderPort","setSenderPort","WebSocket","onopen","console","log","onmessage","event","data","JSON","parse","prevMessages","text","close","get","then","response","users","Object","keys","catch","error","sendMessage","msg","sender","send","stringify","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","user","onClick","index","type","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["/home/veer/Documents/JavaScript/messenger-client/src/components/WebSocketClient.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nfunction WebSocketClient() {\n  const [socket, setSocket] = useState(null);\n  const [message, setMessage] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [activeUsers, setActiveUsers] = useState([]);\n  const [receiver, setReceiver] = useState(null);\n  const [senderIp, setSenderIp] = useState(\"\");\n  const [senderPort, setSenderPort] = useState(\"\");\n\n  useEffect(() => {\n    // Create WebSocket connection only once when the component mounts\n    const socket = new WebSocket(\"ws://192.168.0.132:8880/chat\");\n\n    socket.onopen = () => {\n      console.log(\"Connected to WebSocket server\");\n    };\n\n    socket.onmessage = (event) => {\n      console.log(\"Incoming message:\", event.data);\n      const data = JSON.parse(event.data);\n      setMessages(prevMessages => [...prevMessages, `Receiver: ${data.text}`]);\n    };\n\n    // Store socket in state to be used later\n    setSocket(socket);\n\n    // Clean up on unmount (close WebSocket connection)\n    return () => {\n      if (socket) {\n        socket.close();\n      }\n    };\n  }, []); // Empty dependency array to ensure this effect only runs once\n\n  useEffect(() => {\n    // Fetch active users list from the server using axios\n    axios.get(\"http://192.168.0.132:8880/active-users\")\n      .then(response => {\n        // Convert the object keys to an array of active users\n        const users = Object.keys(response.data);\n        setActiveUsers(users); // Set active users to state\n      })\n      .catch(error => {\n        console.error(\"Error fetching active users:\", error);\n      });\n  }, []);\n\n  const sendMessage = () => {\n    if (socket && message && receiver) {\n        const msg = {\n          sender: `${senderIp}:${senderPort}`, // Sender IP and port from the state\n          receiver: receiver, // Receiver IP and port selected from the UI\n          text: message, // Message input\n        };\n        console.log(\"Sending message:\", msg); // Log JSON to confirm structure\n        socket.send(JSON.stringify(msg)); // Send the message\n        setMessages(prevMessages => [...prevMessages, `You: ${message}`]); // Update UI with sent message\n        setMessage(\"\"); // Clear input field\n      } else {\n        console.log(\"Missing data to send message\");\n      }\n  };\n\n  return (\n    <div>\n      <h1>Chat Application</h1>\n      \n      <div>\n        <h2>Active Users</h2>\n        <ul>\n          {activeUsers.length > 0 ? (\n            activeUsers.map(user => (\n              <li key={user} onClick={() => setReceiver(user)}>\n                {user}\n              </li>\n            ))\n          ) : (\n            <p>No active users found.</p>\n          )}\n        </ul>\n      </div>\n\n      {receiver && (\n        <div>\n          <h2>Chat with {receiver}</h2>\n          <div>\n            {messages.length > 0 ? (\n              messages.map((msg, index) => (\n                <p key={index}>{msg}</p>\n              ))\n            ) : (\n              <p>No messages yet.</p>\n            )}\n          </div>\n          <input\n            type=\"text\"\n            value={message}\n            onChange={e => setMessage(e.target.value)}\n            placeholder=\"Type a message\"\n          />\n          <button onClick={sendMessage}>Send</button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default WebSocketClient;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}